/*
Gaigen 2.5 Test Suite
*/
/*
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

*/

/*! \mainpage e3ga documentation
 *
 * e3ga implementation generated by Gaigen 2.5. 
 * 
 * 
 * License: 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  
 * 
 * \section intro_sec Introduction
 *
 * Todo
 * 
 */
#ifndef _E3GA_H_
#define _E3GA_H_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <string>
namespace e3ga {

// group: 1
#define GROUP_0 1
// group: w0, w1, w2, w3, sw0, sw1, sw2, sw3
#define GROUP_1 2
// group: w0^w1, w0^w2, w1^w2, w0^w3, w1^w3, w2^w3, w0^sw0, w1^sw0, w2^sw0, w3^sw0, w0^sw1, w1^sw1, w2^sw1, w3^sw1, sw0^sw1, w0^sw2, w1^sw2, w2^sw2, w3^sw2, sw0^sw2, sw1^sw2, w0^sw3, w1^sw3, w2^sw3, w3^sw3, sw0^sw3, sw1^sw3, sw2^sw3
#define GROUP_2 4
// group: w0^w1^w2, w0^w1^w3, w0^w2^w3, w1^w2^w3, w0^w1^sw0, w0^w2^sw0, w1^w2^sw0, w0^w3^sw0, w1^w3^sw0, w2^w3^sw0, w0^w1^sw1, w0^w2^sw1, w1^w2^sw1, w0^w3^sw1, w1^w3^sw1, w2^w3^sw1, w0^sw0^sw1, w1^sw0^sw1, w2^sw0^sw1, w3^sw0^sw1, w0^w1^sw2, w0^w2^sw2, w1^w2^sw2, w0^w3^sw2, w1^w3^sw2, w2^w3^sw2, w0^sw0^sw2, w1^sw0^sw2, w2^sw0^sw2, w3^sw0^sw2, w0^sw1^sw2, w1^sw1^sw2, w2^sw1^sw2, w3^sw1^sw2, sw0^sw1^sw2, w0^w1^sw3, w0^w2^sw3, w1^w2^sw3, w0^w3^sw3, w1^w3^sw3, w2^w3^sw3, w0^sw0^sw3, w1^sw0^sw3, w2^sw0^sw3, w3^sw0^sw3, w0^sw1^sw3, w1^sw1^sw3, w2^sw1^sw3, w3^sw1^sw3, sw0^sw1^sw3, w0^sw2^sw3, w1^sw2^sw3, w2^sw2^sw3, w3^sw2^sw3, sw0^sw2^sw3, sw1^sw2^sw3
#define GROUP_3 8
// group: w0^w1^w2^w3, w0^w1^w2^sw0, w0^w1^w3^sw0, w0^w2^w3^sw0, w1^w2^w3^sw0, w0^w1^w2^sw1, w0^w1^w3^sw1, w0^w2^w3^sw1, w1^w2^w3^sw1, w0^w1^sw0^sw1, w0^w2^sw0^sw1, w1^w2^sw0^sw1, w0^w3^sw0^sw1, w1^w3^sw0^sw1, w2^w3^sw0^sw1, w0^w1^w2^sw2, w0^w1^w3^sw2, w0^w2^w3^sw2, w1^w2^w3^sw2, w0^w1^sw0^sw2, w0^w2^sw0^sw2, w1^w2^sw0^sw2, w0^w3^sw0^sw2, w1^w3^sw0^sw2, w2^w3^sw0^sw2, w0^w1^sw1^sw2, w0^w2^sw1^sw2, w1^w2^sw1^sw2, w0^w3^sw1^sw2, w1^w3^sw1^sw2, w2^w3^sw1^sw2, w0^sw0^sw1^sw2, w1^sw0^sw1^sw2, w2^sw0^sw1^sw2, w3^sw0^sw1^sw2, w0^w1^w2^sw3, w0^w1^w3^sw3, w0^w2^w3^sw3, w1^w2^w3^sw3, w0^w1^sw0^sw3, w0^w2^sw0^sw3, w1^w2^sw0^sw3, w0^w3^sw0^sw3, w1^w3^sw0^sw3, w2^w3^sw0^sw3, w0^w1^sw1^sw3, w0^w2^sw1^sw3, w1^w2^sw1^sw3, w0^w3^sw1^sw3, w1^w3^sw1^sw3, w2^w3^sw1^sw3, w0^sw0^sw1^sw3, w1^sw0^sw1^sw3, w2^sw0^sw1^sw3, w3^sw0^sw1^sw3, w0^w1^sw2^sw3, w0^w2^sw2^sw3, w1^w2^sw2^sw3, w0^w3^sw2^sw3, w1^w3^sw2^sw3, w2^w3^sw2^sw3, w0^sw0^sw2^sw3, w1^sw0^sw2^sw3, w2^sw0^sw2^sw3, w3^sw0^sw2^sw3, w0^sw1^sw2^sw3, w1^sw1^sw2^sw3, w2^sw1^sw2^sw3, w3^sw1^sw2^sw3, sw0^sw1^sw2^sw3
#define GROUP_4 16
// group: w0^w1^w2^w3^sw0, w0^w1^w2^w3^sw1, w0^w1^w2^sw0^sw1, w0^w1^w3^sw0^sw1, w0^w2^w3^sw0^sw1, w1^w2^w3^sw0^sw1, w0^w1^w2^w3^sw2, w0^w1^w2^sw0^sw2, w0^w1^w3^sw0^sw2, w0^w2^w3^sw0^sw2, w1^w2^w3^sw0^sw2, w0^w1^w2^sw1^sw2, w0^w1^w3^sw1^sw2, w0^w2^w3^sw1^sw2, w1^w2^w3^sw1^sw2, w0^w1^sw0^sw1^sw2, w0^w2^sw0^sw1^sw2, w1^w2^sw0^sw1^sw2, w0^w3^sw0^sw1^sw2, w1^w3^sw0^sw1^sw2, w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw3, w0^w1^w2^sw0^sw3, w0^w1^w3^sw0^sw3, w0^w2^w3^sw0^sw3, w1^w2^w3^sw0^sw3, w0^w1^w2^sw1^sw3, w0^w1^w3^sw1^sw3, w0^w2^w3^sw1^sw3, w1^w2^w3^sw1^sw3, w0^w1^sw0^sw1^sw3, w0^w2^sw0^sw1^sw3, w1^w2^sw0^sw1^sw3, w0^w3^sw0^sw1^sw3, w1^w3^sw0^sw1^sw3, w2^w3^sw0^sw1^sw3, w0^w1^w2^sw2^sw3, w0^w1^w3^sw2^sw3, w0^w2^w3^sw2^sw3, w1^w2^w3^sw2^sw3, w0^w1^sw0^sw2^sw3, w0^w2^sw0^sw2^sw3, w1^w2^sw0^sw2^sw3, w0^w3^sw0^sw2^sw3, w1^w3^sw0^sw2^sw3, w2^w3^sw0^sw2^sw3, w0^w1^sw1^sw2^sw3, w0^w2^sw1^sw2^sw3, w1^w2^sw1^sw2^sw3, w0^w3^sw1^sw2^sw3, w1^w3^sw1^sw2^sw3, w2^w3^sw1^sw2^sw3, w0^sw0^sw1^sw2^sw3, w1^sw0^sw1^sw2^sw3, w2^sw0^sw1^sw2^sw3, w3^sw0^sw1^sw2^sw3
#define GROUP_5 32
// group: w0^w1^w2^w3^sw0^sw1, w0^w1^w2^w3^sw0^sw2, w0^w1^w2^w3^sw1^sw2, w0^w1^w2^sw0^sw1^sw2, w0^w1^w3^sw0^sw1^sw2, w0^w2^w3^sw0^sw1^sw2, w1^w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw0^sw3, w0^w1^w2^w3^sw1^sw3, w0^w1^w2^sw0^sw1^sw3, w0^w1^w3^sw0^sw1^sw3, w0^w2^w3^sw0^sw1^sw3, w1^w2^w3^sw0^sw1^sw3, w0^w1^w2^w3^sw2^sw3, w0^w1^w2^sw0^sw2^sw3, w0^w1^w3^sw0^sw2^sw3, w0^w2^w3^sw0^sw2^sw3, w1^w2^w3^sw0^sw2^sw3, w0^w1^w2^sw1^sw2^sw3, w0^w1^w3^sw1^sw2^sw3, w0^w2^w3^sw1^sw2^sw3, w1^w2^w3^sw1^sw2^sw3, w0^w1^sw0^sw1^sw2^sw3, w0^w2^sw0^sw1^sw2^sw3, w1^w2^sw0^sw1^sw2^sw3, w0^w3^sw0^sw1^sw2^sw3, w1^w3^sw0^sw1^sw2^sw3, w2^w3^sw0^sw1^sw2^sw3
#define GROUP_6 64
// group: w0^w1^w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw0^sw1^sw3, w0^w1^w2^w3^sw0^sw2^sw3, w0^w1^w2^w3^sw1^sw2^sw3, w0^w1^w2^sw0^sw1^sw2^sw3, w0^w1^w3^sw0^sw1^sw2^sw3, w0^w2^w3^sw0^sw1^sw2^sw3, w1^w2^w3^sw0^sw1^sw2^sw3
#define GROUP_7 128
// group: w0^w1^w2^w3^sw0^sw1^sw2^sw3
#define GROUP_8 256
#define GRADE_0 1
#define GRADE_1 2
#define GRADE_2 4
#define GRADE_3 8
#define GRADE_4 16
#define GRADE_5 32
#define GRADE_6 64
#define GRADE_7 128
#define GRADE_8 256


/// The dimension of the space:
extern const int e3ga_spaceDim;

/// Number of groups/grades of coordinates in a multivector:
extern const int e3ga_nbGroups;

/// The constants for the groups in an array:
extern const int e3ga_groups[];

/// The constants for the grades in an array:
extern const int e3ga_grades[];

/// Is the metric of the space Euclidean? (false or true)
extern const bool e3ga_metricEuclidean;

/// This array can be used to lookup the number of coordinates for a group part of a general multivector
extern const int e3ga_groupSize[9];

/// This array can be used to lookup the number of coordinates based on a group usage bitmap
extern const int e3ga_mvSize[512];

/// This array of ASCIIZ strings contains the names of the basis vectors
extern const char *e3ga_basisVectorNames[8];

/// This array of integers contains the order of basis elements in the general multivector
/// Use it to answer: 'what basis vectors are in the basis element at position [x]?
extern const int e3ga_basisElements[256][9];

/// This array of integers contains the 'sign' (even/odd permutation of canonical order) of basis elements in the general multivector
/// Use it to answer 'what is the permutation of the coordinate at index [x]'?
extern const double e3ga_basisElementSignByIndex[256];

/// This array of integers contains the 'sign' (even/odd permutation of canonical order) of basis elements in the general multivector
/// Use it to answer 'what is the permutation of the coordinate of bitmap [x]'?
extern const double e3ga_basisElementSignByBitmap[256];

/// This array of integers contains the order of basis elements in the general multivector
/// Use it to answer: 'at what index do I find basis element [x] (x = basis vector bitmap)?'
extern const int e3ga_basisElementIndexByBitmap[256];

/// This array of integers contains the indices of basis elements in the general multivector
/// Use it to answer: 'what basis element do I find at index [x]'?
extern const int e3ga_basisElementBitmapByIndex[256];

/// This array of grade of each basis elements in the general multivector
/// Use it to answer: 'what is the grade of basis element bitmap [x]'?
extern const int e3ga_basisElementGradeByBitmap[256];

/// This array of group of each basis elements in the general multivector
/// Use it to answer: 'what is the group of basis element bitmap [x]'?
extern const int e3ga_basisElementGroupByBitmap[256];
class mv;

/**
This function alters the formatting of 'string()'.
'format' = NULL will give you back the default.
*/
void setStringFormat(const char *what, const char *format);

extern const char *string_fp; /* = \"%2.2f\" */
extern const char *string_start; /* = \"\" */
extern const char *string_end; /* = \"\" */
extern const char *string_mul; /* = \"*\" */
extern const char *string_wedge; /* = \"^\" */
extern const char *string_plus; /* = \" + \" */
extern const char *string_minus; /* = \" - \" */

const char *c_str(const mv &obj, char *str, int maxLength, const char *fp = NULL);
std::string toString(const mv &obj, const char *fp = NULL);

inline const char *c_str_f(const mv &obj, char *str, int maxLength) {return c_str(obj, str, maxLength, "%f");}
inline const char *c_str_e(const mv &obj, char *str, int maxLength) {return c_str(obj, str, maxLength, "%e");}
inline const char *c_str_e20(const mv &obj, char *str, int maxLength) {return c_str(obj, str, maxLength, "%2.20e");}

inline std::string toString_f(const mv &obj) {return toString(obj, "%f");}
inline std::string toString_e(const mv &obj) {return toString(obj, "%e");}
inline std::string toString_e20(const mv &obj) {return toString(obj, "%2.20e");}




/// This class can hold a general multivector.
/// 
/// The coordinates are stored in type double.
/// 
/// There are 9 coordinate groups:
/// group 0:1  (grade 0).
/// group 1:w0, w1, w2, w3, sw0, sw1, sw2, sw3  (grade 1).
/// group 2:w0^w1, w0^w2, w1^w2, w0^w3, w1^w3, w2^w3, w0^sw0, w1^sw0, w2^sw0, w3^sw0, w0^sw1, w1^sw1, w2^sw1, w3^sw1, sw0^sw1, w0^sw2, w1^sw2, w2^sw2, w3^sw2, sw0^sw2, sw1^sw2, w0^sw3, w1^sw3, w2^sw3, w3^sw3, sw0^sw3, sw1^sw3, sw2^sw3  (grade 2).
/// group 3:w0^w1^w2, w0^w1^w3, w0^w2^w3, w1^w2^w3, w0^w1^sw0, w0^w2^sw0, w1^w2^sw0, w0^w3^sw0, w1^w3^sw0, w2^w3^sw0, w0^w1^sw1, w0^w2^sw1, w1^w2^sw1, w0^w3^sw1, w1^w3^sw1, w2^w3^sw1, w0^sw0^sw1, w1^sw0^sw1, w2^sw0^sw1, w3^sw0^sw1, w0^w1^sw2, w0^w2^sw2, w1^w2^sw2, w0^w3^sw2, w1^w3^sw2, w2^w3^sw2, w0^sw0^sw2, w1^sw0^sw2, w2^sw0^sw2, w3^sw0^sw2, w0^sw1^sw2, w1^sw1^sw2, w2^sw1^sw2, w3^sw1^sw2, sw0^sw1^sw2, w0^w1^sw3, w0^w2^sw3, w1^w2^sw3, w0^w3^sw3, w1^w3^sw3, w2^w3^sw3, w0^sw0^sw3, w1^sw0^sw3, w2^sw0^sw3, w3^sw0^sw3, w0^sw1^sw3, w1^sw1^sw3, w2^sw1^sw3, w3^sw1^sw3, sw0^sw1^sw3, w0^sw2^sw3, w1^sw2^sw3, w2^sw2^sw3, w3^sw2^sw3, sw0^sw2^sw3, sw1^sw2^sw3  (grade 3).
/// group 4:w0^w1^w2^w3, w0^w1^w2^sw0, w0^w1^w3^sw0, w0^w2^w3^sw0, w1^w2^w3^sw0, w0^w1^w2^sw1, w0^w1^w3^sw1, w0^w2^w3^sw1, w1^w2^w3^sw1, w0^w1^sw0^sw1, w0^w2^sw0^sw1, w1^w2^sw0^sw1, w0^w3^sw0^sw1, w1^w3^sw0^sw1, w2^w3^sw0^sw1, w0^w1^w2^sw2, w0^w1^w3^sw2, w0^w2^w3^sw2, w1^w2^w3^sw2, w0^w1^sw0^sw2, w0^w2^sw0^sw2, w1^w2^sw0^sw2, w0^w3^sw0^sw2, w1^w3^sw0^sw2, w2^w3^sw0^sw2, w0^w1^sw1^sw2, w0^w2^sw1^sw2, w1^w2^sw1^sw2, w0^w3^sw1^sw2, w1^w3^sw1^sw2, w2^w3^sw1^sw2, w0^sw0^sw1^sw2, w1^sw0^sw1^sw2, w2^sw0^sw1^sw2, w3^sw0^sw1^sw2, w0^w1^w2^sw3, w0^w1^w3^sw3, w0^w2^w3^sw3, w1^w2^w3^sw3, w0^w1^sw0^sw3, w0^w2^sw0^sw3, w1^w2^sw0^sw3, w0^w3^sw0^sw3, w1^w3^sw0^sw3, w2^w3^sw0^sw3, w0^w1^sw1^sw3, w0^w2^sw1^sw3, w1^w2^sw1^sw3, w0^w3^sw1^sw3, w1^w3^sw1^sw3, w2^w3^sw1^sw3, w0^sw0^sw1^sw3, w1^sw0^sw1^sw3, w2^sw0^sw1^sw3, w3^sw0^sw1^sw3, w0^w1^sw2^sw3, w0^w2^sw2^sw3, w1^w2^sw2^sw3, w0^w3^sw2^sw3, w1^w3^sw2^sw3, w2^w3^sw2^sw3, w0^sw0^sw2^sw3, w1^sw0^sw2^sw3, w2^sw0^sw2^sw3, w3^sw0^sw2^sw3, w0^sw1^sw2^sw3, w1^sw1^sw2^sw3, w2^sw1^sw2^sw3, w3^sw1^sw2^sw3, sw0^sw1^sw2^sw3  (grade 4).
/// group 5:w0^w1^w2^w3^sw0, w0^w1^w2^w3^sw1, w0^w1^w2^sw0^sw1, w0^w1^w3^sw0^sw1, w0^w2^w3^sw0^sw1, w1^w2^w3^sw0^sw1, w0^w1^w2^w3^sw2, w0^w1^w2^sw0^sw2, w0^w1^w3^sw0^sw2, w0^w2^w3^sw0^sw2, w1^w2^w3^sw0^sw2, w0^w1^w2^sw1^sw2, w0^w1^w3^sw1^sw2, w0^w2^w3^sw1^sw2, w1^w2^w3^sw1^sw2, w0^w1^sw0^sw1^sw2, w0^w2^sw0^sw1^sw2, w1^w2^sw0^sw1^sw2, w0^w3^sw0^sw1^sw2, w1^w3^sw0^sw1^sw2, w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw3, w0^w1^w2^sw0^sw3, w0^w1^w3^sw0^sw3, w0^w2^w3^sw0^sw3, w1^w2^w3^sw0^sw3, w0^w1^w2^sw1^sw3, w0^w1^w3^sw1^sw3, w0^w2^w3^sw1^sw3, w1^w2^w3^sw1^sw3, w0^w1^sw0^sw1^sw3, w0^w2^sw0^sw1^sw3, w1^w2^sw0^sw1^sw3, w0^w3^sw0^sw1^sw3, w1^w3^sw0^sw1^sw3, w2^w3^sw0^sw1^sw3, w0^w1^w2^sw2^sw3, w0^w1^w3^sw2^sw3, w0^w2^w3^sw2^sw3, w1^w2^w3^sw2^sw3, w0^w1^sw0^sw2^sw3, w0^w2^sw0^sw2^sw3, w1^w2^sw0^sw2^sw3, w0^w3^sw0^sw2^sw3, w1^w3^sw0^sw2^sw3, w2^w3^sw0^sw2^sw3, w0^w1^sw1^sw2^sw3, w0^w2^sw1^sw2^sw3, w1^w2^sw1^sw2^sw3, w0^w3^sw1^sw2^sw3, w1^w3^sw1^sw2^sw3, w2^w3^sw1^sw2^sw3, w0^sw0^sw1^sw2^sw3, w1^sw0^sw1^sw2^sw3, w2^sw0^sw1^sw2^sw3, w3^sw0^sw1^sw2^sw3  (grade 5).
/// group 6:w0^w1^w2^w3^sw0^sw1, w0^w1^w2^w3^sw0^sw2, w0^w1^w2^w3^sw1^sw2, w0^w1^w2^sw0^sw1^sw2, w0^w1^w3^sw0^sw1^sw2, w0^w2^w3^sw0^sw1^sw2, w1^w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw0^sw3, w0^w1^w2^w3^sw1^sw3, w0^w1^w2^sw0^sw1^sw3, w0^w1^w3^sw0^sw1^sw3, w0^w2^w3^sw0^sw1^sw3, w1^w2^w3^sw0^sw1^sw3, w0^w1^w2^w3^sw2^sw3, w0^w1^w2^sw0^sw2^sw3, w0^w1^w3^sw0^sw2^sw3, w0^w2^w3^sw0^sw2^sw3, w1^w2^w3^sw0^sw2^sw3, w0^w1^w2^sw1^sw2^sw3, w0^w1^w3^sw1^sw2^sw3, w0^w2^w3^sw1^sw2^sw3, w1^w2^w3^sw1^sw2^sw3, w0^w1^sw0^sw1^sw2^sw3, w0^w2^sw0^sw1^sw2^sw3, w1^w2^sw0^sw1^sw2^sw3, w0^w3^sw0^sw1^sw2^sw3, w1^w3^sw0^sw1^sw2^sw3, w2^w3^sw0^sw1^sw2^sw3  (grade 6).
/// group 7:w0^w1^w2^w3^sw0^sw1^sw2, w0^w1^w2^w3^sw0^sw1^sw3, w0^w1^w2^w3^sw0^sw2^sw3, w0^w1^w2^w3^sw1^sw2^sw3, w0^w1^w2^sw0^sw1^sw2^sw3, w0^w1^w3^sw0^sw1^sw2^sw3, w0^w2^w3^sw0^sw1^sw2^sw3, w1^w2^w3^sw0^sw1^sw2^sw3  (grade 7).
/// group 8:w0^w1^w2^w3^sw0^sw1^sw2^sw3  (grade 8).
/// 
/// 256 doubles are allocated inside the struct.
/// 
class mv
{

public:
	/// group/grade usage (a bitmap which specifies which groups/grades are stored in 'c', below).
	int m_gu; 
	/// the coordinates
	double m_c[256]; 
public:

	/// Floating point type used by mv 
	typedef double Float;

	/// Constructs a new mv with value 0.
	inline mv()  {set();}

	/// Copy constructor.
	inline mv(const mv&A)  {set(A);}


	/// Constructs a new mv with scalar value 'scalar'.
	inline mv(double scalar)  {set(scalar);}

	/// Constructs a new mv from compressed 'coordinates'.
	/// \param gu bitwise OR of the GRADEs or GROUPs that are non-zero.
	/// \param coordinates compressed coordinates.
	inline mv(int gu, const double *coordinates)  {set(gu, coordinates);}



	/// Assignment operator (mv).
	inline mv &operator=(const mv &A) {if (this != &A) {set(A);} return *this;}
	/// Assignment operator (double).
	inline mv &operator=(const double &scalar) {set(scalar); return *this;}
	
	

	/// Sets this mv to 0.
	void set();

	/// Copies the value of 'A' to this.
	void set(const mv &A);

	
	/// Sets this mv to scalar value 'scalar'.
	void set(double scalar);

	/// Sets this mv from compressed 'coordinates'.
	/// \param gu bitwise OR of the GRADEs or GROUPs that are non-zero.
	/// \param coordinates compressed coordinates.
	void set(int gu, const double *coordinates);
	
	/// Returns the scalar coordinate of this mv.
	inline double get_scalar() const {
		return (m_gu & 1) ? m_c[e3ga_mvSize[m_gu & 0] + 0] : 0.0;
	}
	/// Returns the w0 coordinate of this mv.
	inline double get_w0() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 0] : 0.0;
	}
	/// Returns the w1 coordinate of this mv.
	inline double get_w1() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 1] : 0.0;
	}
	/// Returns the w2 coordinate of this mv.
	inline double get_w2() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 2] : 0.0;
	}
	/// Returns the w3 coordinate of this mv.
	inline double get_w3() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 3] : 0.0;
	}
	/// Returns the sw0 coordinate of this mv.
	inline double get_sw0() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 4] : 0.0;
	}
	/// Returns the sw1 coordinate of this mv.
	inline double get_sw1() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 5] : 0.0;
	}
	/// Returns the sw2 coordinate of this mv.
	inline double get_sw2() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 6] : 0.0;
	}
	/// Returns the sw3 coordinate of this mv.
	inline double get_sw3() const {
		return (m_gu & 2) ? m_c[e3ga_mvSize[m_gu & 1] + 7] : 0.0;
	}
	/// Returns the w0_w1 coordinate of this mv.
	inline double get_w0_w1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 0] : 0.0;
	}
	/// Returns the w0_w2 coordinate of this mv.
	inline double get_w0_w2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 1] : 0.0;
	}
	/// Returns the w1_w2 coordinate of this mv.
	inline double get_w1_w2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 2] : 0.0;
	}
	/// Returns the w0_w3 coordinate of this mv.
	inline double get_w0_w3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 3] : 0.0;
	}
	/// Returns the w1_w3 coordinate of this mv.
	inline double get_w1_w3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 4] : 0.0;
	}
	/// Returns the w2_w3 coordinate of this mv.
	inline double get_w2_w3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 5] : 0.0;
	}
	/// Returns the w0_sw0 coordinate of this mv.
	inline double get_w0_sw0() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 6] : 0.0;
	}
	/// Returns the w1_sw0 coordinate of this mv.
	inline double get_w1_sw0() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 7] : 0.0;
	}
	/// Returns the w2_sw0 coordinate of this mv.
	inline double get_w2_sw0() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 8] : 0.0;
	}
	/// Returns the w3_sw0 coordinate of this mv.
	inline double get_w3_sw0() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 9] : 0.0;
	}
	/// Returns the w0_sw1 coordinate of this mv.
	inline double get_w0_sw1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 10] : 0.0;
	}
	/// Returns the w1_sw1 coordinate of this mv.
	inline double get_w1_sw1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 11] : 0.0;
	}
	/// Returns the w2_sw1 coordinate of this mv.
	inline double get_w2_sw1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 12] : 0.0;
	}
	/// Returns the w3_sw1 coordinate of this mv.
	inline double get_w3_sw1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 13] : 0.0;
	}
	/// Returns the sw0_sw1 coordinate of this mv.
	inline double get_sw0_sw1() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 14] : 0.0;
	}
	/// Returns the w0_sw2 coordinate of this mv.
	inline double get_w0_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 15] : 0.0;
	}
	/// Returns the w1_sw2 coordinate of this mv.
	inline double get_w1_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 16] : 0.0;
	}
	/// Returns the w2_sw2 coordinate of this mv.
	inline double get_w2_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 17] : 0.0;
	}
	/// Returns the w3_sw2 coordinate of this mv.
	inline double get_w3_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 18] : 0.0;
	}
	/// Returns the sw0_sw2 coordinate of this mv.
	inline double get_sw0_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 19] : 0.0;
	}
	/// Returns the sw1_sw2 coordinate of this mv.
	inline double get_sw1_sw2() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 20] : 0.0;
	}
	/// Returns the w0_sw3 coordinate of this mv.
	inline double get_w0_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 21] : 0.0;
	}
	/// Returns the w1_sw3 coordinate of this mv.
	inline double get_w1_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 22] : 0.0;
	}
	/// Returns the w2_sw3 coordinate of this mv.
	inline double get_w2_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 23] : 0.0;
	}
	/// Returns the w3_sw3 coordinate of this mv.
	inline double get_w3_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 24] : 0.0;
	}
	/// Returns the sw0_sw3 coordinate of this mv.
	inline double get_sw0_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 25] : 0.0;
	}
	/// Returns the sw1_sw3 coordinate of this mv.
	inline double get_sw1_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 26] : 0.0;
	}
	/// Returns the sw2_sw3 coordinate of this mv.
	inline double get_sw2_sw3() const {
		return (m_gu & 4) ? m_c[e3ga_mvSize[m_gu & 3] + 27] : 0.0;
	}
	/// Returns the w0_w1_w2 coordinate of this mv.
	inline double get_w0_w1_w2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 0] : 0.0;
	}
	/// Returns the w0_w1_w3 coordinate of this mv.
	inline double get_w0_w1_w3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 1] : 0.0;
	}
	/// Returns the w0_w2_w3 coordinate of this mv.
	inline double get_w0_w2_w3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 2] : 0.0;
	}
	/// Returns the w1_w2_w3 coordinate of this mv.
	inline double get_w1_w2_w3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 3] : 0.0;
	}
	/// Returns the w0_w1_sw0 coordinate of this mv.
	inline double get_w0_w1_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 4] : 0.0;
	}
	/// Returns the w0_w2_sw0 coordinate of this mv.
	inline double get_w0_w2_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 5] : 0.0;
	}
	/// Returns the w1_w2_sw0 coordinate of this mv.
	inline double get_w1_w2_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 6] : 0.0;
	}
	/// Returns the w0_w3_sw0 coordinate of this mv.
	inline double get_w0_w3_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 7] : 0.0;
	}
	/// Returns the w1_w3_sw0 coordinate of this mv.
	inline double get_w1_w3_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 8] : 0.0;
	}
	/// Returns the w2_w3_sw0 coordinate of this mv.
	inline double get_w2_w3_sw0() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 9] : 0.0;
	}
	/// Returns the w0_w1_sw1 coordinate of this mv.
	inline double get_w0_w1_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 10] : 0.0;
	}
	/// Returns the w0_w2_sw1 coordinate of this mv.
	inline double get_w0_w2_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 11] : 0.0;
	}
	/// Returns the w1_w2_sw1 coordinate of this mv.
	inline double get_w1_w2_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 12] : 0.0;
	}
	/// Returns the w0_w3_sw1 coordinate of this mv.
	inline double get_w0_w3_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 13] : 0.0;
	}
	/// Returns the w1_w3_sw1 coordinate of this mv.
	inline double get_w1_w3_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 14] : 0.0;
	}
	/// Returns the w2_w3_sw1 coordinate of this mv.
	inline double get_w2_w3_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 15] : 0.0;
	}
	/// Returns the w0_sw0_sw1 coordinate of this mv.
	inline double get_w0_sw0_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 16] : 0.0;
	}
	/// Returns the w1_sw0_sw1 coordinate of this mv.
	inline double get_w1_sw0_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 17] : 0.0;
	}
	/// Returns the w2_sw0_sw1 coordinate of this mv.
	inline double get_w2_sw0_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 18] : 0.0;
	}
	/// Returns the w3_sw0_sw1 coordinate of this mv.
	inline double get_w3_sw0_sw1() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 19] : 0.0;
	}
	/// Returns the w0_w1_sw2 coordinate of this mv.
	inline double get_w0_w1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 20] : 0.0;
	}
	/// Returns the w0_w2_sw2 coordinate of this mv.
	inline double get_w0_w2_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 21] : 0.0;
	}
	/// Returns the w1_w2_sw2 coordinate of this mv.
	inline double get_w1_w2_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 22] : 0.0;
	}
	/// Returns the w0_w3_sw2 coordinate of this mv.
	inline double get_w0_w3_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 23] : 0.0;
	}
	/// Returns the w1_w3_sw2 coordinate of this mv.
	inline double get_w1_w3_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 24] : 0.0;
	}
	/// Returns the w2_w3_sw2 coordinate of this mv.
	inline double get_w2_w3_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 25] : 0.0;
	}
	/// Returns the w0_sw0_sw2 coordinate of this mv.
	inline double get_w0_sw0_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 26] : 0.0;
	}
	/// Returns the w1_sw0_sw2 coordinate of this mv.
	inline double get_w1_sw0_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 27] : 0.0;
	}
	/// Returns the w2_sw0_sw2 coordinate of this mv.
	inline double get_w2_sw0_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 28] : 0.0;
	}
	/// Returns the w3_sw0_sw2 coordinate of this mv.
	inline double get_w3_sw0_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 29] : 0.0;
	}
	/// Returns the w0_sw1_sw2 coordinate of this mv.
	inline double get_w0_sw1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 30] : 0.0;
	}
	/// Returns the w1_sw1_sw2 coordinate of this mv.
	inline double get_w1_sw1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 31] : 0.0;
	}
	/// Returns the w2_sw1_sw2 coordinate of this mv.
	inline double get_w2_sw1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 32] : 0.0;
	}
	/// Returns the w3_sw1_sw2 coordinate of this mv.
	inline double get_w3_sw1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 33] : 0.0;
	}
	/// Returns the sw0_sw1_sw2 coordinate of this mv.
	inline double get_sw0_sw1_sw2() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 34] : 0.0;
	}
	/// Returns the w0_w1_sw3 coordinate of this mv.
	inline double get_w0_w1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 35] : 0.0;
	}
	/// Returns the w0_w2_sw3 coordinate of this mv.
	inline double get_w0_w2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 36] : 0.0;
	}
	/// Returns the w1_w2_sw3 coordinate of this mv.
	inline double get_w1_w2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 37] : 0.0;
	}
	/// Returns the w0_w3_sw3 coordinate of this mv.
	inline double get_w0_w3_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 38] : 0.0;
	}
	/// Returns the w1_w3_sw3 coordinate of this mv.
	inline double get_w1_w3_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 39] : 0.0;
	}
	/// Returns the w2_w3_sw3 coordinate of this mv.
	inline double get_w2_w3_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 40] : 0.0;
	}
	/// Returns the w0_sw0_sw3 coordinate of this mv.
	inline double get_w0_sw0_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 41] : 0.0;
	}
	/// Returns the w1_sw0_sw3 coordinate of this mv.
	inline double get_w1_sw0_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 42] : 0.0;
	}
	/// Returns the w2_sw0_sw3 coordinate of this mv.
	inline double get_w2_sw0_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 43] : 0.0;
	}
	/// Returns the w3_sw0_sw3 coordinate of this mv.
	inline double get_w3_sw0_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 44] : 0.0;
	}
	/// Returns the w0_sw1_sw3 coordinate of this mv.
	inline double get_w0_sw1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 45] : 0.0;
	}
	/// Returns the w1_sw1_sw3 coordinate of this mv.
	inline double get_w1_sw1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 46] : 0.0;
	}
	/// Returns the w2_sw1_sw3 coordinate of this mv.
	inline double get_w2_sw1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 47] : 0.0;
	}
	/// Returns the w3_sw1_sw3 coordinate of this mv.
	inline double get_w3_sw1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 48] : 0.0;
	}
	/// Returns the sw0_sw1_sw3 coordinate of this mv.
	inline double get_sw0_sw1_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 49] : 0.0;
	}
	/// Returns the w0_sw2_sw3 coordinate of this mv.
	inline double get_w0_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 50] : 0.0;
	}
	/// Returns the w1_sw2_sw3 coordinate of this mv.
	inline double get_w1_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 51] : 0.0;
	}
	/// Returns the w2_sw2_sw3 coordinate of this mv.
	inline double get_w2_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 52] : 0.0;
	}
	/// Returns the w3_sw2_sw3 coordinate of this mv.
	inline double get_w3_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 53] : 0.0;
	}
	/// Returns the sw0_sw2_sw3 coordinate of this mv.
	inline double get_sw0_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 54] : 0.0;
	}
	/// Returns the sw1_sw2_sw3 coordinate of this mv.
	inline double get_sw1_sw2_sw3() const {
		return (m_gu & 8) ? m_c[e3ga_mvSize[m_gu & 7] + 55] : 0.0;
	}
	/// Returns the w0_w1_w2_w3 coordinate of this mv.
	inline double get_w0_w1_w2_w3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 0] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0 coordinate of this mv.
	inline double get_w0_w1_w2_sw0() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 1] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0 coordinate of this mv.
	inline double get_w0_w1_w3_sw0() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 2] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0 coordinate of this mv.
	inline double get_w0_w2_w3_sw0() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 3] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0 coordinate of this mv.
	inline double get_w1_w2_w3_sw0() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 4] : 0.0;
	}
	/// Returns the w0_w1_w2_sw1 coordinate of this mv.
	inline double get_w0_w1_w2_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 5] : 0.0;
	}
	/// Returns the w0_w1_w3_sw1 coordinate of this mv.
	inline double get_w0_w1_w3_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 6] : 0.0;
	}
	/// Returns the w0_w2_w3_sw1 coordinate of this mv.
	inline double get_w0_w2_w3_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 7] : 0.0;
	}
	/// Returns the w1_w2_w3_sw1 coordinate of this mv.
	inline double get_w1_w2_w3_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 8] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw1 coordinate of this mv.
	inline double get_w0_w1_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 9] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw1 coordinate of this mv.
	inline double get_w0_w2_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 10] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw1 coordinate of this mv.
	inline double get_w1_w2_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 11] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw1 coordinate of this mv.
	inline double get_w0_w3_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 12] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw1 coordinate of this mv.
	inline double get_w1_w3_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 13] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw1 coordinate of this mv.
	inline double get_w2_w3_sw0_sw1() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 14] : 0.0;
	}
	/// Returns the w0_w1_w2_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 15] : 0.0;
	}
	/// Returns the w0_w1_w3_sw2 coordinate of this mv.
	inline double get_w0_w1_w3_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 16] : 0.0;
	}
	/// Returns the w0_w2_w3_sw2 coordinate of this mv.
	inline double get_w0_w2_w3_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 17] : 0.0;
	}
	/// Returns the w1_w2_w3_sw2 coordinate of this mv.
	inline double get_w1_w2_w3_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 18] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw2 coordinate of this mv.
	inline double get_w0_w1_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 19] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw2 coordinate of this mv.
	inline double get_w0_w2_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 20] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw2 coordinate of this mv.
	inline double get_w1_w2_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 21] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw2 coordinate of this mv.
	inline double get_w0_w3_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 22] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw2 coordinate of this mv.
	inline double get_w1_w3_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 23] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw2 coordinate of this mv.
	inline double get_w2_w3_sw0_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 24] : 0.0;
	}
	/// Returns the w0_w1_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 25] : 0.0;
	}
	/// Returns the w0_w2_sw1_sw2 coordinate of this mv.
	inline double get_w0_w2_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 26] : 0.0;
	}
	/// Returns the w1_w2_sw1_sw2 coordinate of this mv.
	inline double get_w1_w2_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 27] : 0.0;
	}
	/// Returns the w0_w3_sw1_sw2 coordinate of this mv.
	inline double get_w0_w3_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 28] : 0.0;
	}
	/// Returns the w1_w3_sw1_sw2 coordinate of this mv.
	inline double get_w1_w3_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 29] : 0.0;
	}
	/// Returns the w2_w3_sw1_sw2 coordinate of this mv.
	inline double get_w2_w3_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 30] : 0.0;
	}
	/// Returns the w0_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_sw0_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 31] : 0.0;
	}
	/// Returns the w1_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w1_sw0_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 32] : 0.0;
	}
	/// Returns the w2_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w2_sw0_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 33] : 0.0;
	}
	/// Returns the w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w3_sw0_sw1_sw2() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 34] : 0.0;
	}
	/// Returns the w0_w1_w2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 35] : 0.0;
	}
	/// Returns the w0_w1_w3_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 36] : 0.0;
	}
	/// Returns the w0_w2_w3_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 37] : 0.0;
	}
	/// Returns the w1_w2_w3_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 38] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw3 coordinate of this mv.
	inline double get_w0_w1_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 39] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw3 coordinate of this mv.
	inline double get_w0_w2_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 40] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw3 coordinate of this mv.
	inline double get_w1_w2_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 41] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw3 coordinate of this mv.
	inline double get_w0_w3_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 42] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw3 coordinate of this mv.
	inline double get_w1_w3_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 43] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw3 coordinate of this mv.
	inline double get_w2_w3_sw0_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 44] : 0.0;
	}
	/// Returns the w0_w1_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 45] : 0.0;
	}
	/// Returns the w0_w2_sw1_sw3 coordinate of this mv.
	inline double get_w0_w2_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 46] : 0.0;
	}
	/// Returns the w1_w2_sw1_sw3 coordinate of this mv.
	inline double get_w1_w2_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 47] : 0.0;
	}
	/// Returns the w0_w3_sw1_sw3 coordinate of this mv.
	inline double get_w0_w3_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 48] : 0.0;
	}
	/// Returns the w1_w3_sw1_sw3 coordinate of this mv.
	inline double get_w1_w3_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 49] : 0.0;
	}
	/// Returns the w2_w3_sw1_sw3 coordinate of this mv.
	inline double get_w2_w3_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 50] : 0.0;
	}
	/// Returns the w0_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_sw0_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 51] : 0.0;
	}
	/// Returns the w1_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w1_sw0_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 52] : 0.0;
	}
	/// Returns the w2_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w2_sw0_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 53] : 0.0;
	}
	/// Returns the w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w3_sw0_sw1_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 54] : 0.0;
	}
	/// Returns the w0_w1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 55] : 0.0;
	}
	/// Returns the w0_w2_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 56] : 0.0;
	}
	/// Returns the w1_w2_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 57] : 0.0;
	}
	/// Returns the w0_w3_sw2_sw3 coordinate of this mv.
	inline double get_w0_w3_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 58] : 0.0;
	}
	/// Returns the w1_w3_sw2_sw3 coordinate of this mv.
	inline double get_w1_w3_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 59] : 0.0;
	}
	/// Returns the w2_w3_sw2_sw3 coordinate of this mv.
	inline double get_w2_w3_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 60] : 0.0;
	}
	/// Returns the w0_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_sw0_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 61] : 0.0;
	}
	/// Returns the w1_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w1_sw0_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 62] : 0.0;
	}
	/// Returns the w2_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w2_sw0_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 63] : 0.0;
	}
	/// Returns the w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w3_sw0_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 64] : 0.0;
	}
	/// Returns the w0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_sw1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 65] : 0.0;
	}
	/// Returns the w1_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_sw1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 66] : 0.0;
	}
	/// Returns the w2_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w2_sw1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 67] : 0.0;
	}
	/// Returns the w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w3_sw1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 68] : 0.0;
	}
	/// Returns the sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_sw0_sw1_sw2_sw3() const {
		return (m_gu & 16) ? m_c[e3ga_mvSize[m_gu & 15] + 69] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 0] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw1 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw1() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 1] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw1 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw1() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 2] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw1 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw1() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 3] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw1 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw1() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 4] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw1 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw1() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 5] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 6] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 7] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw2 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 8] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw2 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 9] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw2 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 10] : 0.0;
	}
	/// Returns the w0_w1_w2_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 11] : 0.0;
	}
	/// Returns the w0_w1_w3_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w3_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 12] : 0.0;
	}
	/// Returns the w0_w2_w3_sw1_sw2 coordinate of this mv.
	inline double get_w0_w2_w3_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 13] : 0.0;
	}
	/// Returns the w1_w2_w3_sw1_sw2 coordinate of this mv.
	inline double get_w1_w2_w3_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 14] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 15] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w2_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 16] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w1_w2_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 17] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w3_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 18] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w1_w3_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 19] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w2_w3_sw0_sw1_sw2() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 20] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 21] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 22] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 23] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 24] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 25] : 0.0;
	}
	/// Returns the w0_w1_w2_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 26] : 0.0;
	}
	/// Returns the w0_w1_w3_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 27] : 0.0;
	}
	/// Returns the w0_w2_w3_sw1_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 28] : 0.0;
	}
	/// Returns the w1_w2_w3_sw1_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 29] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 30] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w2_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 31] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w1_w2_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 32] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w3_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 33] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w1_w3_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 34] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w2_w3_sw0_sw1_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 35] : 0.0;
	}
	/// Returns the w0_w1_w2_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 36] : 0.0;
	}
	/// Returns the w0_w1_w3_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 37] : 0.0;
	}
	/// Returns the w0_w2_w3_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 38] : 0.0;
	}
	/// Returns the w1_w2_w3_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 39] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 40] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 41] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 42] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w3_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 43] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w1_w3_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 44] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w2_w3_sw0_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 45] : 0.0;
	}
	/// Returns the w0_w1_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 46] : 0.0;
	}
	/// Returns the w0_w2_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 47] : 0.0;
	}
	/// Returns the w1_w2_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 48] : 0.0;
	}
	/// Returns the w0_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w3_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 49] : 0.0;
	}
	/// Returns the w1_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w3_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 50] : 0.0;
	}
	/// Returns the w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w2_w3_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 51] : 0.0;
	}
	/// Returns the w0_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_sw0_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 52] : 0.0;
	}
	/// Returns the w1_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_sw0_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 53] : 0.0;
	}
	/// Returns the w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w2_sw0_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 54] : 0.0;
	}
	/// Returns the w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 32) ? m_c[e3ga_mvSize[m_gu & 31] + 55] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw1 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw1() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 0] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 1] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw1_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 2] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw1_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 3] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw1_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 4] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw1_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 5] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw1_sw2() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 6] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 7] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw1_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 8] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw1_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 9] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw1_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 10] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw1_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 11] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw1_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 12] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 13] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 14] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 15] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 16] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 17] : 0.0;
	}
	/// Returns the w0_w1_w2_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 18] : 0.0;
	}
	/// Returns the w0_w1_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 19] : 0.0;
	}
	/// Returns the w0_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 20] : 0.0;
	}
	/// Returns the w1_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 21] : 0.0;
	}
	/// Returns the w0_w1_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 22] : 0.0;
	}
	/// Returns the w0_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 23] : 0.0;
	}
	/// Returns the w1_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 24] : 0.0;
	}
	/// Returns the w0_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 25] : 0.0;
	}
	/// Returns the w1_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 26] : 0.0;
	}
	/// Returns the w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w2_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 64) ? m_c[e3ga_mvSize[m_gu & 63] + 27] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw1_sw2() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 0] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw1_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 1] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 2] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw1_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 3] : 0.0;
	}
	/// Returns the w0_w1_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_sw0_sw1_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 4] : 0.0;
	}
	/// Returns the w0_w1_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 5] : 0.0;
	}
	/// Returns the w0_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w2_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 6] : 0.0;
	}
	/// Returns the w1_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w1_w2_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 128) ? m_c[e3ga_mvSize[m_gu & 127] + 7] : 0.0;
	}
	/// Returns the w0_w1_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline double get_w0_w1_w2_w3_sw0_sw1_sw2_sw3() const {
		return (m_gu & 256) ? m_c[e3ga_mvSize[m_gu & 255] + 0] : 0.0;
	}
	/// Returns array of compressed coordinates.
	inline const double *getC() const { return m_c;}
	/// Sets the scalar coordinate of this mv.
	inline void set_scalar(double val)  {
		reserveGroup_0();
		m_c[e3ga_mvSize[m_gu & 0] + 0] = val;
	}
	/// Sets the w0 coordinate of this mv.
	inline void set_w0(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 0] = val;
	}
	/// Sets the w1 coordinate of this mv.
	inline void set_w1(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 1] = val;
	}
	/// Sets the w2 coordinate of this mv.
	inline void set_w2(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 2] = val;
	}
	/// Sets the w3 coordinate of this mv.
	inline void set_w3(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 3] = val;
	}
	/// Sets the sw0 coordinate of this mv.
	inline void set_sw0(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 4] = val;
	}
	/// Sets the sw1 coordinate of this mv.
	inline void set_sw1(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 5] = val;
	}
	/// Sets the sw2 coordinate of this mv.
	inline void set_sw2(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 6] = val;
	}
	/// Sets the sw3 coordinate of this mv.
	inline void set_sw3(double val)  {
		reserveGroup_1();
		m_c[e3ga_mvSize[m_gu & 1] + 7] = val;
	}
	/// Sets the w0_w1 coordinate of this mv.
	inline void set_w0_w1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 0] = val;
	}
	/// Sets the w0_w2 coordinate of this mv.
	inline void set_w0_w2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 1] = val;
	}
	/// Sets the w1_w2 coordinate of this mv.
	inline void set_w1_w2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 2] = val;
	}
	/// Sets the w0_w3 coordinate of this mv.
	inline void set_w0_w3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 3] = val;
	}
	/// Sets the w1_w3 coordinate of this mv.
	inline void set_w1_w3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 4] = val;
	}
	/// Sets the w2_w3 coordinate of this mv.
	inline void set_w2_w3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 5] = val;
	}
	/// Sets the w0_sw0 coordinate of this mv.
	inline void set_w0_sw0(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 6] = val;
	}
	/// Sets the w1_sw0 coordinate of this mv.
	inline void set_w1_sw0(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 7] = val;
	}
	/// Sets the w2_sw0 coordinate of this mv.
	inline void set_w2_sw0(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 8] = val;
	}
	/// Sets the w3_sw0 coordinate of this mv.
	inline void set_w3_sw0(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 9] = val;
	}
	/// Sets the w0_sw1 coordinate of this mv.
	inline void set_w0_sw1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 10] = val;
	}
	/// Sets the w1_sw1 coordinate of this mv.
	inline void set_w1_sw1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 11] = val;
	}
	/// Sets the w2_sw1 coordinate of this mv.
	inline void set_w2_sw1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 12] = val;
	}
	/// Sets the w3_sw1 coordinate of this mv.
	inline void set_w3_sw1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 13] = val;
	}
	/// Sets the sw0_sw1 coordinate of this mv.
	inline void set_sw0_sw1(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 14] = val;
	}
	/// Sets the w0_sw2 coordinate of this mv.
	inline void set_w0_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 15] = val;
	}
	/// Sets the w1_sw2 coordinate of this mv.
	inline void set_w1_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 16] = val;
	}
	/// Sets the w2_sw2 coordinate of this mv.
	inline void set_w2_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 17] = val;
	}
	/// Sets the w3_sw2 coordinate of this mv.
	inline void set_w3_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 18] = val;
	}
	/// Sets the sw0_sw2 coordinate of this mv.
	inline void set_sw0_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 19] = val;
	}
	/// Sets the sw1_sw2 coordinate of this mv.
	inline void set_sw1_sw2(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 20] = val;
	}
	/// Sets the w0_sw3 coordinate of this mv.
	inline void set_w0_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 21] = val;
	}
	/// Sets the w1_sw3 coordinate of this mv.
	inline void set_w1_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 22] = val;
	}
	/// Sets the w2_sw3 coordinate of this mv.
	inline void set_w2_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 23] = val;
	}
	/// Sets the w3_sw3 coordinate of this mv.
	inline void set_w3_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 24] = val;
	}
	/// Sets the sw0_sw3 coordinate of this mv.
	inline void set_sw0_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 25] = val;
	}
	/// Sets the sw1_sw3 coordinate of this mv.
	inline void set_sw1_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 26] = val;
	}
	/// Sets the sw2_sw3 coordinate of this mv.
	inline void set_sw2_sw3(double val)  {
		reserveGroup_2();
		m_c[e3ga_mvSize[m_gu & 3] + 27] = val;
	}
	/// Sets the w0_w1_w2 coordinate of this mv.
	inline void set_w0_w1_w2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 0] = val;
	}
	/// Sets the w0_w1_w3 coordinate of this mv.
	inline void set_w0_w1_w3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 1] = val;
	}
	/// Sets the w0_w2_w3 coordinate of this mv.
	inline void set_w0_w2_w3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 2] = val;
	}
	/// Sets the w1_w2_w3 coordinate of this mv.
	inline void set_w1_w2_w3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 3] = val;
	}
	/// Sets the w0_w1_sw0 coordinate of this mv.
	inline void set_w0_w1_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 4] = val;
	}
	/// Sets the w0_w2_sw0 coordinate of this mv.
	inline void set_w0_w2_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 5] = val;
	}
	/// Sets the w1_w2_sw0 coordinate of this mv.
	inline void set_w1_w2_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 6] = val;
	}
	/// Sets the w0_w3_sw0 coordinate of this mv.
	inline void set_w0_w3_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 7] = val;
	}
	/// Sets the w1_w3_sw0 coordinate of this mv.
	inline void set_w1_w3_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 8] = val;
	}
	/// Sets the w2_w3_sw0 coordinate of this mv.
	inline void set_w2_w3_sw0(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 9] = val;
	}
	/// Sets the w0_w1_sw1 coordinate of this mv.
	inline void set_w0_w1_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 10] = val;
	}
	/// Sets the w0_w2_sw1 coordinate of this mv.
	inline void set_w0_w2_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 11] = val;
	}
	/// Sets the w1_w2_sw1 coordinate of this mv.
	inline void set_w1_w2_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 12] = val;
	}
	/// Sets the w0_w3_sw1 coordinate of this mv.
	inline void set_w0_w3_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 13] = val;
	}
	/// Sets the w1_w3_sw1 coordinate of this mv.
	inline void set_w1_w3_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 14] = val;
	}
	/// Sets the w2_w3_sw1 coordinate of this mv.
	inline void set_w2_w3_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 15] = val;
	}
	/// Sets the w0_sw0_sw1 coordinate of this mv.
	inline void set_w0_sw0_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 16] = val;
	}
	/// Sets the w1_sw0_sw1 coordinate of this mv.
	inline void set_w1_sw0_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 17] = val;
	}
	/// Sets the w2_sw0_sw1 coordinate of this mv.
	inline void set_w2_sw0_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 18] = val;
	}
	/// Sets the w3_sw0_sw1 coordinate of this mv.
	inline void set_w3_sw0_sw1(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 19] = val;
	}
	/// Sets the w0_w1_sw2 coordinate of this mv.
	inline void set_w0_w1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 20] = val;
	}
	/// Sets the w0_w2_sw2 coordinate of this mv.
	inline void set_w0_w2_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 21] = val;
	}
	/// Sets the w1_w2_sw2 coordinate of this mv.
	inline void set_w1_w2_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 22] = val;
	}
	/// Sets the w0_w3_sw2 coordinate of this mv.
	inline void set_w0_w3_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 23] = val;
	}
	/// Sets the w1_w3_sw2 coordinate of this mv.
	inline void set_w1_w3_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 24] = val;
	}
	/// Sets the w2_w3_sw2 coordinate of this mv.
	inline void set_w2_w3_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 25] = val;
	}
	/// Sets the w0_sw0_sw2 coordinate of this mv.
	inline void set_w0_sw0_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 26] = val;
	}
	/// Sets the w1_sw0_sw2 coordinate of this mv.
	inline void set_w1_sw0_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 27] = val;
	}
	/// Sets the w2_sw0_sw2 coordinate of this mv.
	inline void set_w2_sw0_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 28] = val;
	}
	/// Sets the w3_sw0_sw2 coordinate of this mv.
	inline void set_w3_sw0_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 29] = val;
	}
	/// Sets the w0_sw1_sw2 coordinate of this mv.
	inline void set_w0_sw1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 30] = val;
	}
	/// Sets the w1_sw1_sw2 coordinate of this mv.
	inline void set_w1_sw1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 31] = val;
	}
	/// Sets the w2_sw1_sw2 coordinate of this mv.
	inline void set_w2_sw1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 32] = val;
	}
	/// Sets the w3_sw1_sw2 coordinate of this mv.
	inline void set_w3_sw1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 33] = val;
	}
	/// Sets the sw0_sw1_sw2 coordinate of this mv.
	inline void set_sw0_sw1_sw2(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 34] = val;
	}
	/// Sets the w0_w1_sw3 coordinate of this mv.
	inline void set_w0_w1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 35] = val;
	}
	/// Sets the w0_w2_sw3 coordinate of this mv.
	inline void set_w0_w2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 36] = val;
	}
	/// Sets the w1_w2_sw3 coordinate of this mv.
	inline void set_w1_w2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 37] = val;
	}
	/// Sets the w0_w3_sw3 coordinate of this mv.
	inline void set_w0_w3_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 38] = val;
	}
	/// Sets the w1_w3_sw3 coordinate of this mv.
	inline void set_w1_w3_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 39] = val;
	}
	/// Sets the w2_w3_sw3 coordinate of this mv.
	inline void set_w2_w3_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 40] = val;
	}
	/// Sets the w0_sw0_sw3 coordinate of this mv.
	inline void set_w0_sw0_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 41] = val;
	}
	/// Sets the w1_sw0_sw3 coordinate of this mv.
	inline void set_w1_sw0_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 42] = val;
	}
	/// Sets the w2_sw0_sw3 coordinate of this mv.
	inline void set_w2_sw0_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 43] = val;
	}
	/// Sets the w3_sw0_sw3 coordinate of this mv.
	inline void set_w3_sw0_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 44] = val;
	}
	/// Sets the w0_sw1_sw3 coordinate of this mv.
	inline void set_w0_sw1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 45] = val;
	}
	/// Sets the w1_sw1_sw3 coordinate of this mv.
	inline void set_w1_sw1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 46] = val;
	}
	/// Sets the w2_sw1_sw3 coordinate of this mv.
	inline void set_w2_sw1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 47] = val;
	}
	/// Sets the w3_sw1_sw3 coordinate of this mv.
	inline void set_w3_sw1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 48] = val;
	}
	/// Sets the sw0_sw1_sw3 coordinate of this mv.
	inline void set_sw0_sw1_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 49] = val;
	}
	/// Sets the w0_sw2_sw3 coordinate of this mv.
	inline void set_w0_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 50] = val;
	}
	/// Sets the w1_sw2_sw3 coordinate of this mv.
	inline void set_w1_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 51] = val;
	}
	/// Sets the w2_sw2_sw3 coordinate of this mv.
	inline void set_w2_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 52] = val;
	}
	/// Sets the w3_sw2_sw3 coordinate of this mv.
	inline void set_w3_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 53] = val;
	}
	/// Sets the sw0_sw2_sw3 coordinate of this mv.
	inline void set_sw0_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 54] = val;
	}
	/// Sets the sw1_sw2_sw3 coordinate of this mv.
	inline void set_sw1_sw2_sw3(double val)  {
		reserveGroup_3();
		m_c[e3ga_mvSize[m_gu & 7] + 55] = val;
	}
	/// Sets the w0_w1_w2_w3 coordinate of this mv.
	inline void set_w0_w1_w2_w3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 0] = val;
	}
	/// Sets the w0_w1_w2_sw0 coordinate of this mv.
	inline void set_w0_w1_w2_sw0(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 1] = val;
	}
	/// Sets the w0_w1_w3_sw0 coordinate of this mv.
	inline void set_w0_w1_w3_sw0(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 2] = val;
	}
	/// Sets the w0_w2_w3_sw0 coordinate of this mv.
	inline void set_w0_w2_w3_sw0(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 3] = val;
	}
	/// Sets the w1_w2_w3_sw0 coordinate of this mv.
	inline void set_w1_w2_w3_sw0(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 4] = val;
	}
	/// Sets the w0_w1_w2_sw1 coordinate of this mv.
	inline void set_w0_w1_w2_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 5] = val;
	}
	/// Sets the w0_w1_w3_sw1 coordinate of this mv.
	inline void set_w0_w1_w3_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 6] = val;
	}
	/// Sets the w0_w2_w3_sw1 coordinate of this mv.
	inline void set_w0_w2_w3_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 7] = val;
	}
	/// Sets the w1_w2_w3_sw1 coordinate of this mv.
	inline void set_w1_w2_w3_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 8] = val;
	}
	/// Sets the w0_w1_sw0_sw1 coordinate of this mv.
	inline void set_w0_w1_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 9] = val;
	}
	/// Sets the w0_w2_sw0_sw1 coordinate of this mv.
	inline void set_w0_w2_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 10] = val;
	}
	/// Sets the w1_w2_sw0_sw1 coordinate of this mv.
	inline void set_w1_w2_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 11] = val;
	}
	/// Sets the w0_w3_sw0_sw1 coordinate of this mv.
	inline void set_w0_w3_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 12] = val;
	}
	/// Sets the w1_w3_sw0_sw1 coordinate of this mv.
	inline void set_w1_w3_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 13] = val;
	}
	/// Sets the w2_w3_sw0_sw1 coordinate of this mv.
	inline void set_w2_w3_sw0_sw1(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 14] = val;
	}
	/// Sets the w0_w1_w2_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 15] = val;
	}
	/// Sets the w0_w1_w3_sw2 coordinate of this mv.
	inline void set_w0_w1_w3_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 16] = val;
	}
	/// Sets the w0_w2_w3_sw2 coordinate of this mv.
	inline void set_w0_w2_w3_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 17] = val;
	}
	/// Sets the w1_w2_w3_sw2 coordinate of this mv.
	inline void set_w1_w2_w3_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 18] = val;
	}
	/// Sets the w0_w1_sw0_sw2 coordinate of this mv.
	inline void set_w0_w1_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 19] = val;
	}
	/// Sets the w0_w2_sw0_sw2 coordinate of this mv.
	inline void set_w0_w2_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 20] = val;
	}
	/// Sets the w1_w2_sw0_sw2 coordinate of this mv.
	inline void set_w1_w2_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 21] = val;
	}
	/// Sets the w0_w3_sw0_sw2 coordinate of this mv.
	inline void set_w0_w3_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 22] = val;
	}
	/// Sets the w1_w3_sw0_sw2 coordinate of this mv.
	inline void set_w1_w3_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 23] = val;
	}
	/// Sets the w2_w3_sw0_sw2 coordinate of this mv.
	inline void set_w2_w3_sw0_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 24] = val;
	}
	/// Sets the w0_w1_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 25] = val;
	}
	/// Sets the w0_w2_sw1_sw2 coordinate of this mv.
	inline void set_w0_w2_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 26] = val;
	}
	/// Sets the w1_w2_sw1_sw2 coordinate of this mv.
	inline void set_w1_w2_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 27] = val;
	}
	/// Sets the w0_w3_sw1_sw2 coordinate of this mv.
	inline void set_w0_w3_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 28] = val;
	}
	/// Sets the w1_w3_sw1_sw2 coordinate of this mv.
	inline void set_w1_w3_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 29] = val;
	}
	/// Sets the w2_w3_sw1_sw2 coordinate of this mv.
	inline void set_w2_w3_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 30] = val;
	}
	/// Sets the w0_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_sw0_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 31] = val;
	}
	/// Sets the w1_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w1_sw0_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 32] = val;
	}
	/// Sets the w2_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w2_sw0_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 33] = val;
	}
	/// Sets the w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 34] = val;
	}
	/// Sets the w0_w1_w2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 35] = val;
	}
	/// Sets the w0_w1_w3_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 36] = val;
	}
	/// Sets the w0_w2_w3_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 37] = val;
	}
	/// Sets the w1_w2_w3_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 38] = val;
	}
	/// Sets the w0_w1_sw0_sw3 coordinate of this mv.
	inline void set_w0_w1_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 39] = val;
	}
	/// Sets the w0_w2_sw0_sw3 coordinate of this mv.
	inline void set_w0_w2_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 40] = val;
	}
	/// Sets the w1_w2_sw0_sw3 coordinate of this mv.
	inline void set_w1_w2_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 41] = val;
	}
	/// Sets the w0_w3_sw0_sw3 coordinate of this mv.
	inline void set_w0_w3_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 42] = val;
	}
	/// Sets the w1_w3_sw0_sw3 coordinate of this mv.
	inline void set_w1_w3_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 43] = val;
	}
	/// Sets the w2_w3_sw0_sw3 coordinate of this mv.
	inline void set_w2_w3_sw0_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 44] = val;
	}
	/// Sets the w0_w1_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 45] = val;
	}
	/// Sets the w0_w2_sw1_sw3 coordinate of this mv.
	inline void set_w0_w2_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 46] = val;
	}
	/// Sets the w1_w2_sw1_sw3 coordinate of this mv.
	inline void set_w1_w2_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 47] = val;
	}
	/// Sets the w0_w3_sw1_sw3 coordinate of this mv.
	inline void set_w0_w3_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 48] = val;
	}
	/// Sets the w1_w3_sw1_sw3 coordinate of this mv.
	inline void set_w1_w3_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 49] = val;
	}
	/// Sets the w2_w3_sw1_sw3 coordinate of this mv.
	inline void set_w2_w3_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 50] = val;
	}
	/// Sets the w0_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_sw0_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 51] = val;
	}
	/// Sets the w1_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w1_sw0_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 52] = val;
	}
	/// Sets the w2_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w2_sw0_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 53] = val;
	}
	/// Sets the w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 54] = val;
	}
	/// Sets the w0_w1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 55] = val;
	}
	/// Sets the w0_w2_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 56] = val;
	}
	/// Sets the w1_w2_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 57] = val;
	}
	/// Sets the w0_w3_sw2_sw3 coordinate of this mv.
	inline void set_w0_w3_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 58] = val;
	}
	/// Sets the w1_w3_sw2_sw3 coordinate of this mv.
	inline void set_w1_w3_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 59] = val;
	}
	/// Sets the w2_w3_sw2_sw3 coordinate of this mv.
	inline void set_w2_w3_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 60] = val;
	}
	/// Sets the w0_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_sw0_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 61] = val;
	}
	/// Sets the w1_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w1_sw0_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 62] = val;
	}
	/// Sets the w2_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w2_sw0_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 63] = val;
	}
	/// Sets the w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 64] = val;
	}
	/// Sets the w0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_sw1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 65] = val;
	}
	/// Sets the w1_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_sw1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 66] = val;
	}
	/// Sets the w2_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w2_sw1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 67] = val;
	}
	/// Sets the w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 68] = val;
	}
	/// Sets the sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_4();
		m_c[e3ga_mvSize[m_gu & 15] + 69] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 0] = val;
	}
	/// Sets the w0_w1_w2_w3_sw1 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw1(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 1] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw1 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw1(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 2] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw1 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw1(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 3] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw1 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw1(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 4] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw1 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw1(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 5] = val;
	}
	/// Sets the w0_w1_w2_w3_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 6] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 7] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw2 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 8] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw2 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 9] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw2 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 10] = val;
	}
	/// Sets the w0_w1_w2_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 11] = val;
	}
	/// Sets the w0_w1_w3_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w3_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 12] = val;
	}
	/// Sets the w0_w2_w3_sw1_sw2 coordinate of this mv.
	inline void set_w0_w2_w3_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 13] = val;
	}
	/// Sets the w1_w2_w3_sw1_sw2 coordinate of this mv.
	inline void set_w1_w2_w3_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 14] = val;
	}
	/// Sets the w0_w1_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 15] = val;
	}
	/// Sets the w0_w2_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w2_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 16] = val;
	}
	/// Sets the w1_w2_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w1_w2_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 17] = val;
	}
	/// Sets the w0_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 18] = val;
	}
	/// Sets the w1_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w1_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 19] = val;
	}
	/// Sets the w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w2_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 20] = val;
	}
	/// Sets the w0_w1_w2_w3_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 21] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 22] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 23] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 24] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 25] = val;
	}
	/// Sets the w0_w1_w2_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 26] = val;
	}
	/// Sets the w0_w1_w3_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 27] = val;
	}
	/// Sets the w0_w2_w3_sw1_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 28] = val;
	}
	/// Sets the w1_w2_w3_sw1_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 29] = val;
	}
	/// Sets the w0_w1_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 30] = val;
	}
	/// Sets the w0_w2_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w2_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 31] = val;
	}
	/// Sets the w1_w2_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w1_w2_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 32] = val;
	}
	/// Sets the w0_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 33] = val;
	}
	/// Sets the w1_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w1_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 34] = val;
	}
	/// Sets the w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w2_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 35] = val;
	}
	/// Sets the w0_w1_w2_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 36] = val;
	}
	/// Sets the w0_w1_w3_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 37] = val;
	}
	/// Sets the w0_w2_w3_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 38] = val;
	}
	/// Sets the w1_w2_w3_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 39] = val;
	}
	/// Sets the w0_w1_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 40] = val;
	}
	/// Sets the w0_w2_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 41] = val;
	}
	/// Sets the w1_w2_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 42] = val;
	}
	/// Sets the w0_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 43] = val;
	}
	/// Sets the w1_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w1_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 44] = val;
	}
	/// Sets the w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w2_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 45] = val;
	}
	/// Sets the w0_w1_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 46] = val;
	}
	/// Sets the w0_w2_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 47] = val;
	}
	/// Sets the w1_w2_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 48] = val;
	}
	/// Sets the w0_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 49] = val;
	}
	/// Sets the w1_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 50] = val;
	}
	/// Sets the w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w2_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 51] = val;
	}
	/// Sets the w0_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 52] = val;
	}
	/// Sets the w1_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 53] = val;
	}
	/// Sets the w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w2_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 54] = val;
	}
	/// Sets the w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_5();
		m_c[e3ga_mvSize[m_gu & 31] + 55] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw1 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw1(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 0] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 1] = val;
	}
	/// Sets the w0_w1_w2_w3_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw1_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 2] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw1_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 3] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 4] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 5] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 6] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 7] = val;
	}
	/// Sets the w0_w1_w2_w3_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw1_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 8] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw1_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 9] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 10] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 11] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 12] = val;
	}
	/// Sets the w0_w1_w2_w3_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 13] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 14] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 15] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 16] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 17] = val;
	}
	/// Sets the w0_w1_w2_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 18] = val;
	}
	/// Sets the w0_w1_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 19] = val;
	}
	/// Sets the w0_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 20] = val;
	}
	/// Sets the w1_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 21] = val;
	}
	/// Sets the w0_w1_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 22] = val;
	}
	/// Sets the w0_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 23] = val;
	}
	/// Sets the w1_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 24] = val;
	}
	/// Sets the w0_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 25] = val;
	}
	/// Sets the w1_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 26] = val;
	}
	/// Sets the w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w2_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_6();
		m_c[e3ga_mvSize[m_gu & 63] + 27] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw1_sw2 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw1_sw2(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 0] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw1_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw1_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 1] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 2] = val;
	}
	/// Sets the w0_w1_w2_w3_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw1_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 3] = val;
	}
	/// Sets the w0_w1_w2_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 4] = val;
	}
	/// Sets the w0_w1_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 5] = val;
	}
	/// Sets the w0_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w2_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 6] = val;
	}
	/// Sets the w1_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w1_w2_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_7();
		m_c[e3ga_mvSize[m_gu & 127] + 7] = val;
	}
	/// Sets the w0_w1_w2_w3_sw0_sw1_sw2_sw3 coordinate of this mv.
	inline void set_w0_w1_w2_w3_sw0_sw1_sw2_sw3(double val)  {
		reserveGroup_8();
		m_c[e3ga_mvSize[m_gu & 255] + 0] = val;
	}

	/// Compresses this mv by removing groups/grades with coordinates are smaller than epsilon.
	void compress(double epsilon = 0.0);
	/// Sets each entry in 'ptrs' to a pointer to the coordinates for the respective grade / group.
	/// \param ptrs Array of pointers to grades/groups. The pointers are set by this function.
	/// \param nulls When true, pointers are set to NULL for empty grades/groups; otherwise a pointer to an array filled with zeros is used.
	void expand(const double *ptrs[9], bool nulls = true) const;

	/// returns the absolute largest coordinate.
	double largestCoordinate() const;
	/// returns the absolute largest coordinate, and the corresponding basis blade bitmap (in 'bm').
	double largestBasisBlade(unsigned int &bm) const;
	/// returns grade/group.
	inline int gu() const {return m_gu;}

	/// Returns a string representation (const char*) of this multivector.
	/// Not multi-threading safe.
	/// \param fp how floats are printed (e.g., "%f");
	inline const char * c_str(const char *fp = NULL) const {
		static char buf[2048]; // not MT-safe
		return ::e3ga::c_str(*this, buf, 2048, fp);
	}
	
	/// Returns a string representation (const char*) of this multivector using %f.
	/// Not multi-threading safe.
	inline const char * c_str_f() const {return c_str("%f");}
	/// Returns a string representation (const char*) of this multivector using %e
	/// Not multi-threading safe.
	inline const char * c_str_e() const {return c_str("%e");}
	/// Returns a string representation (const char*) of this multivector using %e20 (which is lossless for doubles)
	/// Not multi-threading safe.
	inline const char * c_str_e20() const {return c_str("%2.20e");}

	/// Returns a string representation (const char*) of this multivector.
	inline std::string toString(const char *fp = NULL) const {
		return ::e3ga::toString(*this, fp);
	}
	
	/// Returns a string representation (const char*) of this multivector using %f.
	inline std::string toString_f() const {return toString("%f");}
	/// Returns a string representation (const char*) of this multivector using %e.
	inline std::string toString_e() const {return toString("%e");}
	/// Returns a string representation (const char*) of this multivector using %e20.
	inline std::string toString_e20() const {return toString("%2.20e");}
public:
	inline double const *nullFloats() const {
		static double *nf = NULL;
		return (nf == NULL) ? (nf = new double[256]) : nf;
	}

public:
	/// Set m_gu, reallocates m_c to the size required by gu
	inline void setGroupUsage(int gu) {
		if (m_gu == gu) return;
		m_gu = gu;
	}

	/**
	Allocates memory for coordinate GROUP_0.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_0() {
		if ((m_gu & 1) == 0) {
			const int groupUsageBelow = m_gu & 0;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 1;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 1;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_1.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_1() {
		if ((m_gu & 2) == 0) {
			const int groupUsageBelow = m_gu & 1;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 2;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 3;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_2.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_2() {
		if ((m_gu & 4) == 0) {
			const int groupUsageBelow = m_gu & 3;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 4;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 7;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = ptr[8] = ptr[9] = ptr[10] = ptr[11] = ptr[12] = ptr[13] = ptr[14] = ptr[15] = ptr[16] = ptr[17] = ptr[18] = ptr[19] = ptr[20] = ptr[21] = ptr[22] = ptr[23] = ptr[24] = ptr[25] = ptr[26] = ptr[27] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_3.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_3() {
		if ((m_gu & 8) == 0) {
			const int groupUsageBelow = m_gu & 7;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 8;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 15;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = ptr[8] = ptr[9] = ptr[10] = ptr[11] = ptr[12] = ptr[13] = ptr[14] = ptr[15] = ptr[16] = ptr[17] = ptr[18] = ptr[19] = ptr[20] = ptr[21] = ptr[22] = ptr[23] = ptr[24] = ptr[25] = ptr[26] = ptr[27] = ptr[28] = ptr[29] = ptr[30] = ptr[31] = ptr[32] = ptr[33] = ptr[34] = ptr[35] = ptr[36] = ptr[37] = ptr[38] = ptr[39] = ptr[40] = ptr[41] = ptr[42] = ptr[43] = ptr[44] = ptr[45] = ptr[46] = ptr[47] = ptr[48] = ptr[49] = ptr[50] = ptr[51] = ptr[52] = ptr[53] = ptr[54] = ptr[55] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_4.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_4() {
		if ((m_gu & 16) == 0) {
			const int groupUsageBelow = m_gu & 15;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 16;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 31;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = ptr[8] = ptr[9] = ptr[10] = ptr[11] = ptr[12] = ptr[13] = ptr[14] = ptr[15] = ptr[16] = ptr[17] = ptr[18] = ptr[19] = ptr[20] = ptr[21] = ptr[22] = ptr[23] = ptr[24] = ptr[25] = ptr[26] = ptr[27] = ptr[28] = ptr[29] = ptr[30] = ptr[31] = ptr[32] = ptr[33] = ptr[34] = ptr[35] = ptr[36] = ptr[37] = ptr[38] = ptr[39] = ptr[40] = ptr[41] = ptr[42] = ptr[43] = ptr[44] = ptr[45] = ptr[46] = ptr[47] = ptr[48] = ptr[49] = ptr[50] = ptr[51] = ptr[52] = ptr[53] = ptr[54] = ptr[55] = ptr[56] = ptr[57] = ptr[58] = ptr[59] = ptr[60] = ptr[61] = ptr[62] = ptr[63] = ptr[64] = ptr[65] = ptr[66] = ptr[67] = ptr[68] = ptr[69] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_5.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_5() {
		if ((m_gu & 32) == 0) {
			const int groupUsageBelow = m_gu & 31;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 32;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 63;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = ptr[8] = ptr[9] = ptr[10] = ptr[11] = ptr[12] = ptr[13] = ptr[14] = ptr[15] = ptr[16] = ptr[17] = ptr[18] = ptr[19] = ptr[20] = ptr[21] = ptr[22] = ptr[23] = ptr[24] = ptr[25] = ptr[26] = ptr[27] = ptr[28] = ptr[29] = ptr[30] = ptr[31] = ptr[32] = ptr[33] = ptr[34] = ptr[35] = ptr[36] = ptr[37] = ptr[38] = ptr[39] = ptr[40] = ptr[41] = ptr[42] = ptr[43] = ptr[44] = ptr[45] = ptr[46] = ptr[47] = ptr[48] = ptr[49] = ptr[50] = ptr[51] = ptr[52] = ptr[53] = ptr[54] = ptr[55] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_6.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_6() {
		if ((m_gu & 64) == 0) {
			const int groupUsageBelow = m_gu & 63;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 64;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 127;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = ptr[8] = ptr[9] = ptr[10] = ptr[11] = ptr[12] = ptr[13] = ptr[14] = ptr[15] = ptr[16] = ptr[17] = ptr[18] = ptr[19] = ptr[20] = ptr[21] = ptr[22] = ptr[23] = ptr[24] = ptr[25] = ptr[26] = ptr[27] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_7.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_7() {
		if ((m_gu & 128) == 0) {
			const int groupUsageBelow = m_gu & 127;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 128;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 255;

			setGroupUsage(newGroupUsage);

			// move coordinate beyond new group
			double *dst = m_c + e3ga_mvSize[newGroupUsageBelowNextGroup];
			double *src = m_c + e3ga_mvSize[groupUsageBelow];
			for (int i = e3ga_mvSize[groupUsageAbove]-1; i >= 0; i--) // work from end to start of array to avoid overwriting (dst is always beyond src)
				dst[i] = src[i];

			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = ptr[1] = ptr[2] = ptr[3] = ptr[4] = ptr[5] = ptr[6] = ptr[7] = 0.0;
		}
	}
	/**
	Allocates memory for coordinate GROUP_8.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	inline void reserveGroup_8() {
		if ((m_gu & 256) == 0) {
			const int groupUsageBelow = m_gu & 255;
			const int groupUsageAbove = m_gu ^ groupUsageBelow;
			const int newGroupUsage = m_gu | 256;
			const int newGroupUsageBelowNextGroup = newGroupUsage & 511;

			setGroupUsage(newGroupUsage);


			// set coordinates of new group to 0
			double *ptr = m_c + e3ga_mvSize[groupUsageBelow];
			ptr[0] = 0.0;
		}
	}
}; // end of class mv


/**
This class is used to report usage of converted specialized multivectors.

The class is designed to be pretty safe with multi-threading without locking.
In the wordt case, some memory leaks occur and some counts are missed. 
The amount of memory leaked is bounded (goes not grow beyond a certain
point). Since the report-usage functionality is for
development/debugging only, this is not considered non-harmful.
*/
class ReportUsage {
	/// prints out error message that ReportUsage is disabled
	static void printReport(FILE *F = stdout, bool includeCount = true);
}; // end of class ReportUsage

/** Sets 1 double to zero */
void zero_1(double *dst);
/** Copies 1 double from 'src' to 'dst' */
void copy_1(double *dst, const double *src);
/** Sets 2 doubles to zero */
void zero_2(double *dst);
/** Copies 2 doubles from 'src' to 'dst' */
void copy_2(double *dst, const double *src);
/** Sets 3 doubles to zero */
void zero_3(double *dst);
/** Copies 3 doubles from 'src' to 'dst' */
void copy_3(double *dst, const double *src);
/** Sets 4 doubles to zero */
void zero_4(double *dst);
/** Copies 4 doubles from 'src' to 'dst' */
void copy_4(double *dst, const double *src);
/** Sets 5 doubles to zero */
void zero_5(double *dst);
/** Copies 5 doubles from 'src' to 'dst' */
void copy_5(double *dst, const double *src);
/** Sets 6 doubles to zero */
void zero_6(double *dst);
/** Copies 6 doubles from 'src' to 'dst' */
void copy_6(double *dst, const double *src);
/** Sets 7 doubles to zero */
void zero_7(double *dst);
/** Copies 7 doubles from 'src' to 'dst' */
void copy_7(double *dst, const double *src);
/** Sets 8 doubles to zero */
void zero_8(double *dst);
/** Copies 8 doubles from 'src' to 'dst' */
void copy_8(double *dst, const double *src);
/** Sets 9 doubles to zero */
void zero_9(double *dst);
/** Copies 9 doubles from 'src' to 'dst' */
void copy_9(double *dst, const double *src);
/** Sets 10 doubles to zero */
void zero_10(double *dst);
/** Copies 10 doubles from 'src' to 'dst' */
void copy_10(double *dst, const double *src);
/** Sets 11 doubles to zero */
void zero_11(double *dst);
/** Copies 11 doubles from 'src' to 'dst' */
void copy_11(double *dst, const double *src);
/** Sets 12 doubles to zero */
void zero_12(double *dst);
/** Copies 12 doubles from 'src' to 'dst' */
void copy_12(double *dst, const double *src);
/** Sets 13 doubles to zero */
void zero_13(double *dst);
/** Copies 13 doubles from 'src' to 'dst' */
void copy_13(double *dst, const double *src);
/** Sets 14 doubles to zero */
void zero_14(double *dst);
/** Copies 14 doubles from 'src' to 'dst' */
void copy_14(double *dst, const double *src);
/** Sets 15 doubles to zero */
void zero_15(double *dst);
/** Copies 15 doubles from 'src' to 'dst' */
void copy_15(double *dst, const double *src);
/** Sets 16 doubles to zero */
void zero_16(double *dst);
/** Copies 16 doubles from 'src' to 'dst' */
void copy_16(double *dst, const double *src);
/** Sets N doubles to zero */
void zero_N(double *dst, int N);
/** Copies N doubles from 'src' to 'dst' */
void copy_N(double *dst, const double *src, int N);
// decl SB:

/// Returns scalar part of  mv
double _double(const mv &x);
/// Returns scalar part of  mv
inline double _Float(const mv &x) {return _double(x); };

/// Compresses coordinates 'c' into a new multivector.
/// \param c the coordinates (may already be partially compressed, see argument 'gu').
/// \param epsilon value with a abs magnitude < epsilon are considered to be 0.
/// \param gu optionally specifies which groups/grades are present in 'c'.
mv mv_compress(const double *c, double epsilon = 0.0, int gu = 511);
/// Compresses an array of coordinates/basis blade bitmaps into a new multivector.
mv mv_compress(int nbBlades, const unsigned int *bitmaps, const double *coords);


/// Returns mv + mv.
mv add(const mv &a, const mv &b);
/// Returns mv - mv.
mv subtract(const mv &a, const mv &b);
/// Returns geometric product of mv and mv.
mv gp(const mv &a, const mv &b);

/** Computes sinh of mv.
 */
mv sinh(const mv &x, int order = 12);

/** Computes cosh of mv.
 */
mv cosh(const mv &x, int order = 12);

/** Computes cos of mv.
 */
mv cos(const mv &x, int order = 12);

/** Computes sin of mv.
 */
mv sin(const mv &x, int order = 12);
/// Returns true if all coordinates of a are abs <= b
bool zero(const mv &a, const double b);
/// Returns unit of mv using default metric.
mv unit(const mv &a);

/** Computes exp of mv.
 */
mv exp(const mv &x, int order = 12);
/// Returns norm of mv using default metric.
double norm(const mv &a);
/// internal conversion function
double norm_returns_scalar(const mv &a);
/// Returns whether input multivectors are equal up to an epsilon c.
bool equals(const mv &a, const mv &b, const double c);
/// Returns geometric product of mv and double.
mv gp(const mv &a, const double b);
/// Returns double b * mv a + double c.
mv sas(const mv &a, const double b, const double c);
/// Returns norm2 of mv using default metric.
double norm2(const mv &a);
/// internal conversion function
double norm2_returns_scalar(const mv &a);
/// returns add(a, b)
inline mv operator+(const mv &a, const mv &b) {
	return add(a, b);
}
/// returns (a = add(a, b))
inline mv &operator+=(mv &a, const mv &b) {
	return (a = add(a, b));
}
/// returns subtract(a, b)
inline mv operator-(const mv &a, const mv &b) {
	return subtract(a, b);
}
/// returns (a = subtract(a, b))
inline mv &operator-=(mv &a, const mv &b) {
	return (a = subtract(a, b));
}
/// returns gp(a, b)
inline mv operator*(const mv &a, const mv &b) {
	return gp(a, b);
}
/// returns (a = gp(a, b))
inline mv &operator*=(mv &a, const mv &b) {
	return (a = gp(a, b));
}
/// returns gp(a, b)
inline mv operator*(const mv &a, const double &b) {
	return gp(a, b);
}
/// returns (a = gp(a, b))
inline mv &operator*=(mv &a, const double &b) {
	return (a = gp(a, b));
}

inline void zero_1(double *dst) {
	dst[0]=0.0;
}
inline void copy_1(double *dst, const double *src) {
	dst[0] = src[0];
}
inline void zero_2(double *dst) {
	dst[0]=dst[1]=0.0;
}
inline void copy_2(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
}
inline void zero_3(double *dst) {
	dst[0]=dst[1]=dst[2]=0.0;
}
inline void copy_3(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
}
inline void zero_4(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=0.0;
}
inline void copy_4(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
}
inline void zero_5(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=0.0;
}
inline void copy_5(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
}
inline void zero_6(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=0.0;
}
inline void copy_6(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
}
inline void zero_7(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=0.0;
}
inline void copy_7(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
}
inline void zero_8(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=0.0;
}
inline void copy_8(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
}
inline void zero_9(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=0.0;
}
inline void copy_9(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
}
inline void zero_10(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=0.0;
}
inline void copy_10(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
}
inline void zero_11(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=0.0;
}
inline void copy_11(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
}
inline void zero_12(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=dst[11]=0.0;
}
inline void copy_12(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
	dst[11] = src[11];
}
inline void zero_13(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=dst[11]=dst[12]=0.0;
}
inline void copy_13(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
	dst[11] = src[11];
	dst[12] = src[12];
}
inline void zero_14(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=dst[11]=dst[12]=dst[13]=0.0;
}
inline void copy_14(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
	dst[11] = src[11];
	dst[12] = src[12];
	dst[13] = src[13];
}
inline void zero_15(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=dst[11]=dst[12]=dst[13]=dst[14]=0.0;
}
inline void copy_15(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
	dst[11] = src[11];
	dst[12] = src[12];
	dst[13] = src[13];
	dst[14] = src[14];
}
inline void zero_16(double *dst) {
	dst[0]=dst[1]=dst[2]=dst[3]=dst[4]=dst[5]=dst[6]=dst[7]=dst[8]=dst[9]=dst[10]=dst[11]=dst[12]=dst[13]=dst[14]=dst[15]=0.0;
}
inline void copy_16(double *dst, const double *src) {
	dst[0] = src[0];
	dst[1] = src[1];
	dst[2] = src[2];
	dst[3] = src[3];
	dst[4] = src[4];
	dst[5] = src[5];
	dst[6] = src[6];
	dst[7] = src[7];
	dst[8] = src[8];
	dst[9] = src[9];
	dst[10] = src[10];
	dst[11] = src[11];
	dst[12] = src[12];
	dst[13] = src[13];
	dst[14] = src[14];
	dst[15] = src[15];
}
/** Sets N doubles to zero */
inline void zero_N(double *dst, int N) {
	int i = 0;
	while ((N-i) > 16) {
		zero_16(dst + i);
		i += 16;
	}
	for (; i < N; i++)
		dst[i] = 0.0;
}
/** Copies N doubles from 'src' to 'dst' */
inline void copy_N(double *dst, const double *src, int N) {
	int i = 0;
	while ((N-i) > 16) {
		copy_16(dst + i, src + i);
		i += 16;
	}
	for (; i < N; i++)
		dst[i] = src[i];
}
// inline def SB:
inline void mv::set() {
	setGroupUsage(0);
}
inline void mv::set(double val) {
	setGroupUsage(1);
	m_c[0] = val;
}
inline void mv::set(int gu, const double *arr) {
	setGroupUsage(gu);
	e3ga::copy_N(m_c, arr, e3ga_mvSize[gu]);

}
inline void mv::set(const mv &src) {
	setGroupUsage(src.gu());
	const double*srcC = src.getC();
	e3ga::copy_N(m_c, srcC, e3ga_mvSize[src.gu()]);

}

inline double _double(const mv &x) {
	return ((x.gu() & 1) != 0) ? x.getC()[0] : 0.0;
}








inline double norm_returns_scalar(const mv &a) {
	return norm(a);
}
inline double norm2_returns_scalar(const mv &a) {
	return norm2(a);
}


/** structure used by custom parser */
struct e3gaParseMultivectorData {
	/** the parsed value */
	mv value;
	/** this string will contain an error message when error is true */
	char message[256];
};

/** 
Parses 'str' (output of toString_mv()) and stores result in 'val' 
Throws std::string on error.
*/
mv parse(const std::string &str);

/** 
Parses 'str' (output of toString_mv()) and stores result in 'data'. 
'strSourceName' is the name of the source of 'str' (for example, a filename).
It is used for error messages.

	Returns true when 'str' parsed correctly.
Otherwise a lexer or parser error occured and you can check 
the errors in 'data->message'.
*/
bool parseEx(struct e3gaParseMultivectorData &data, const std::string &str, const std::string &strSourceName);
} // end of namespace e3ga
#endif /* _E3GA_H_ */
